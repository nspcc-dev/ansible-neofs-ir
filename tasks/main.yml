---

# Prepare system
- name: Ensure there is neofs-ir group
  ansible.builtin.group:
    name: "{{ neofs_ir__group }}"
    system: True
    state: 'present'

- name: Ensure there is neofs-ir user
  ansible.builtin.user:
    name: "{{ neofs_ir__user }}"
    group: "{{ neofs_ir__group }}"
    password: !
    shell: /usr/sbin/nologin
    home: "{{ neofs_ir__data_dir }}"
    system: True
    state: 'present'

- name: Ensure data directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "{{ neofs_ir__user }}"
    group: "{{ neofs_ir__group }}"
    mode: '0750'
  with_items:
    - "{{ neofs_ir__data_dir }}"

- name: Ensure configuration directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "root"
    group: "{{ neofs_ir__group }}"
    mode: '0750'
  with_items:
    - "{{ neofs_ir__conf_dir }}"

- name: Ensure there is node wallet
  ansible.builtin.copy:
    content: "{{ neofs_ir__wallet }}"
    dest: "{{ neofs_ir__wallet_path }}"
    owner: 'root'
    group: "{{ neofs_ir__group }}"
    mode: '0660'
  notify:
    - Restart neofs-ir instance service

- name: Download locode database archive
  ansible.builtin.unarchive:
    src: "{{ neofs_ir__locodedb_download_url }}"
    remote_src: yes
    dest: "{{ neofs_ir__data_dir }}"
    owner: "{{ neofs_ir__user }}"
    group: "{{ neofs_ir__group }}"
    mode: '0644'
  notify:
    - Restart neofs-ir instance service

- name: Prepare NeoFS IR config for neofs-ir{{ neofs_ir__instance }}
  ansible.builtin.template:
    src: 'config.yaml.j2'
    dest: "{{ neofs_ir__conf_dir }}/config.yaml"
    owner: 'root'
    group: "{{ neofs_ir__group }}"
    mode: '0640'
  notify:
    - Restart neofs-ir instance service

- name: Download neofs-ir binary
  ansible.builtin.get_url:
    url: "{{ neofs_ir__bin_url }}"
    dest: "{{ neofs_ir__bin_path }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: not (neofs_ir__use_compose | bool)
  notify:
    - Restart neofs-ir instance service

- name: Get uid for neofs-ir user
  ansible.builtin.getent:
    database: passwd
    key: "{{ neofs_ir__user }}"

- name: Get gid for neofs-ir user
  ansible.builtin.getent:
    database: group
    key: "{{ neofs_ir__group }}"

- name: Prepare docker-compose for neofs-ir{{ neofs_ir__instance }}
  ansible.builtin.template:
    src: 'docker-compose.yml.j2'
    dest: "{{ neofs_ir__conf_dir }}/docker-compose.yml"
    owner: 'root'
    group: "{{ neofs_ir__group }}"
    mode: '0640'
  when: neofs_ir__use_compose | bool
  notify:
    - Restart neofs-ir instance service

- name: Copy regular systemd unit file
  ansible.builtin.template:
    src: "neofs-ir.service.bin.j2"
    dest: "/etc/systemd/system/neofs-ir{{ neofs_ir__instance }}.service"
  when: not (neofs_ir__use_compose | bool)
  notify:
    - Restart neofs-ir instance service

- name: Copy Docker systemd unit file
  ansible.builtin.template:
    src: "neofs-ir.service.compose.j2"
    dest: "/etc/systemd/system/neofs-ir{{ neofs_ir__instance }}.service"
  when: neofs_ir__use_compose | bool
  notify:
    - Restart neofs-ir instance service

- name: Ensure NeoFS IR{{ neofs_ir__instance }} service runs
  ansible.builtin.systemd:
    name: "neofs-ir{{ neofs_ir__instance }}.service"
    state: 'started'
    enabled: yes
    daemon_reload: yes

- name: Force debops.ferm run
  include_role:
    name: debops.debops.ferm
  vars:
    ferm__dependent_rules:
      - "{{ neofs_ir__ferm__dependent_rules }}"
  when: neofs_ir__debops_ferm_import | bool
