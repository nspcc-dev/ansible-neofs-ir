---

# User and group for NeoFS to run and own files
neofs_ir__user: "neofs-ir{{ neofs_ir__instance }}"
neofs_ir__group: "neofs-ir{{ neofs_ir__instance }}"

# Instance name to have multiple NeoFS nodes on the same host
neofs_ir__instance: ''

# Directory for configuration files and keys
neofs_ir__conf_dir: "/etc/neofs/ir{{ neofs_ir__instance }}"

# Directory for databases and processing results
neofs_ir__data_dir: "/var/lib/neofs/neofs-ir{{ neofs_ir__instance }}"

neofs_ir__wallet: "/local/path/to/wallet"
neofs_ir__wallet_path: "{{ neofs_ir__conf_dir }}/wallet.json"
neofs_ir__wallet_address: ""
neofs_ir__wallet_passwd: ""

# Should be true to disable governance contract
neofs_ir__governance_disable: false

# Default bind address
neofs_ir__bind_address: '0.0.0.0'

neofs_ir__morph_rpc: 'http://127.0.0.1:40332'
neofs_ir__morph_notification: 'ws://127.0.0.1:40332/ws'

neofs_ir__mainnet_rpc: 'http://127.0.0.1:20332'
neofs_ir__mainnet_notification: 'ws://127.0.0.1:20332/ws'

neofs_ir__without_mainnet: False

neofs_ir__locodedb_version: 'v0.1.0'
neofs_ir__locodedb_download_url:
  "https://github.com/nspcc-dev/neofs-locode-db/releases/download/{{ neofs_ir__locodedb_version }}/locode.db.tar.gz"

neofs_ir__locodedb_path: "{{ neofs_ir__data_dir }}/locode.db"
neofs_ir__persistent_state_path: "{{ neofs_ir__data_dir }}/.state"

# Contract hashes might be auto-negotiated from NNS. One may
# leave this list empty, and Inner Ring node will obtain the hashes.
neofs_ir__contracts:
  netmap: '600270a6fd666dc137fa3e62c9d2606b75aeb298'
  balance: '2835a2d2a28ffc8866840df7aafda5780c7514a3'
  container: '08ebc0b968cdce2851f1a1d2fe9340e77b1f0f6c'
  neofs: '37a32e1bf20ed5141bc5748892a82f14e75a8e22'
  audit: '27571287757e0e9809d01799c9f049a8ae5952ce'
  proxy: 'dedf58b489e5af01a1a2089393102d46d74806ac'

# Alphabet hashes might be auto-negotiated from NNS. One may
# leave this list empty, and Inner Ring node will obtain the hashes.
neofs_ir__alphabet:
  az: 'dc4c2e03f2ca806a82415407cd2264338cc751b4'
  buky: '1e01771dfb5cb499f194f54d53bc4d0a37fca393'
  vedi: 'c4c68a82ec161658ccf41ac849bc587ebabc4147'
  glagoli: '7c718d032ad348820497c619f6d2f00011b22cf5'
  dobro: '88b3a5b5de99aae9308408301e9b64620fe9f999'
  yest: '2f78667749d5da59ea622f5f809022a786f8f700'
  zhivete: '06f739fa714d23d1ce8a569595812cf8f9023b1e'

neofs_ir__alphabet_length: 7

neofs_ir__validators:
  - '026fa34ec057d74c2fdf1a18e336d0bd597ea401a0b2ad57340d5c220d09f44086'
  - '039a9db2a30942b1843db673aeb0d4fd6433f74cec1d879de6343cb9fcf7628fa4'
  - '0366d255e7ce23ea6f7f1e4bedf5cbafe598705b47e6ec213ef13b2f0819e8ab33'
  - '023f9cb7bbe154d529d5c719fdc39feaa831a43ae03d2a4280575b60f52fa7bc52'
  - '039ba959e0ab6dc616df8b803692f1c30ba9071b76b05535eb994bf5bbc402ad5f'
  - '035a2a18cddafa25ad353dea5e6730a1b9fcb4b918c4a0303c4387bb9c3b816adf'
  - '031f4d9c66f2ec348832c48fd3a16dfaeb59e85f557ae1e07f6696d0375c64f97b'


neofs_ir__sidechain_fee: 500000000

neofs_ir__emit_timer: 240

# Ports and options for each service
neofs_ir__prometheus_enabled: False
neofs_ir__prometheus_port: '6662'
neofs_ir__prometheus_address: 'localhost'
neofs_ir__prometheus_allow: []
neofs_ir__prometheus_group_allow: []
neofs_ir__prometheus_host_allow: []

neofs_ir__pprof_enabled: False
neofs_ir__pprof_port: '6661'
neofs_ir__pprof_address: '{{ neofs_ir__bind_address }}'
neofs_ir__pprof_allow: []
neofs_ir__pprof_group_allow: []
neofs_ir__pprof_host_allow: []

# NeoFS options
neofs_ir__version: '0.25.1'
neofs_ir__docker_image: "nspccdev/neofs-ir:{{ neofs_ir__version }}"
neofs_ir__bin_url: "https://github.com/nspcc-dev/neofs-node/releases/download/v{{ neofs_ir__version }}/neofs-ir-amd64"
neofs_ir__bin_path: '/usr/local/bin/neofs-ir'

# Systemd unit may use docker compose to run NeoFS IR in container, instead of
# local binary.
neofs_ir__use_compose: False

# Force debops.ferm run via role import
# May be useful when you need to have multiple instances with different
# firewall rules for each one.
neofs_ir__debops_ferm_import: False

# firewall configuration to be applied with debops.ferm role
neofs_ir__ferm__dependent_rules:
  - type: 'accept'
    name: "neofs-ir{{ neofs_ir__instance }}_prometheus"
    dport: [ '{{ neofs_ir__prometheus_port }}' ]
    daddr: [ '{{ neofs_ir__prometheus_address }}' ]
    saddr: '{{ neofs_ir__prometheus_allow + neofs_ir__prometheus_group_allow + neofs_ir__prometheus_host_allow }}'
    protocol: 'tcp'
    role: 'neofs-ir'
    rule_state: "{{ 'present' if neofs_ir__prometheus_enabled else 'absent' }}"

  - type: 'accept'
    name: "neofs-ir{{ neofs_ir__instance }}_pprof"
    dport: [ '{{ neofs_ir__pprof_port }}' ]
    daddr: [ '{{ neofs_ir__pprof_address }}' ]
    saddr: '{{ neofs_ir__pprof_allow + neofs_ir__pprof_group_allow + neofs_ir__pprof_host_allow }}'
    protocol: 'tcp'
    role: 'neofs-ir'
    rule_state: "{{ 'present' if neofs_ir__pprof_enabled else 'absent' }}"
